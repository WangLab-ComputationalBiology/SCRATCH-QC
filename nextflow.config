/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

nextflow.enable.moduleBinaries = true

params {

    // Pipeline parameters
    samplesheet    = "${baseDir}/assets/test_sample_table.csv"
    meta_data      = "${baseDir}/assets/test_meta_data.csv"
    
    genome         = "GRCh38" // options: GRCh38 and GRCm39
    outdir         = "${baseDir}"
    project_name   = "project"
    modality       = "GEX"

    // Quarto notebooks
    notebook_quality            = "${baseDir}/modules/local/seurat/quality/notebook_seurat_qc.qmd"
    notebook_summarize          = "${baseDir}/modules/local/helper/summarize/notebook_quality_table_report.qmd"
    notebook_merge              = "${baseDir}/modules/local/seurat/merge/notebook_seurat_merge.qmd"
    notebook_doubletfinder      = "${baseDir}/modules/local/doubletfinder/notebook_doublet_detection.qmd"
    notebook_scdblfinder        = "${baseDir}/modules/local/scdblfinder/notebook_scdblfinder.qmd"

    notebook_normalize          = "${baseDir}/modules/local/seurat/normalization/notebook_dimensionality_reduction.qmd"
    notebook_clustering         = "${baseDir}/modules/local/seurat/cluster/notebook_seurat_clustering.qmd"
    
    // QC parameters
    input_gex_matrices_path     = "${baseDir}/data/SCRATCH_ALIGN:CELLRANGER_COUNT/**/outs/*"
    input_exp_table             = "${baseDir}/output/pipeline_info/samplesheet.valid.csv"

    thr_estimate_n_cells        = 300
    thr_mean_reads_per_cells    = 25000
    thr_median_genes_per_cell   = 900
    thr_median_umi_per_cell     = 1000
    thr_n_feature_rna_min       = 300
    thr_n_feature_rna_max       = 7500
    thr_percent_mito            = 25
    thr_n_observed_cells        = 300

    // Normalization parameters
    input_merged_object         = "${baseDir}/data/SCRATCH_QC:SEURAT_MERGE/*_merged_object.RDS"

    thr_n_features              = 2000
    thr_n_dimensions            = 100
    
    // Clustering parameters
    input_integration_dimension = "auto"
    input_group_plot            = "patient_id;timepoint"
    thr_resolution              = 0.5
    thr_proportion              = 0.25

    // Dataflow parameters
    igenomes_base  = 'gs://btc-refdata/scRNA/refData'

    // Quarto parameters
    page_config    = "${baseDir}/assets/template/_quarto.yml"
    logotype       = "${baseDir}/assets/template/SCRATCH.png"
    template       = "${baseDir}/assets/template/*"

    // Max resource options
    max_cpus                = 16
    max_memory              = '128.GB'
    max_time                = '240.h'

}

docker {
    enabled      = true
    fixOwnership = true
}

process {
    containerOptions = '-u root:root -e USERID=$UID -e XDG_CACHE_HOME=tmp/quarto_cache_home -e XDG_DATA_HOME=tmp/quarto_data_home -e QUARTO_PRINT_STACK=true'
    stageInMode = 'copy'
    afterScript = 'rm -rf tmp'
}

// Load nf-core custom profiles from different Institutions
profiles {

    test { includeConfig 'conf/test.config' }

}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load igenomes.config
includeConfig 'conf/igenomes.config'

// Function to ensure that resource requirements dont go beyond
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}